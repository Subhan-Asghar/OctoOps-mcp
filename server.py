import os
from github import Github, Auth
from git import Repo
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP

# Initialize MCP Agent
mcp = FastMCP("OctoOps")

# Load environment variables
load_dotenv()

def git_auth() -> Github:
    access_token = os.getenv("GITHUB_TOKEN")
    if not access_token:
        raise EnvironmentError("Missing GITHUB_TOKEN in environment variables.")

    auth = Auth.Token(access_token)
    return Github(auth=auth)

@mcp.tool()
def git_clone(repo_url: str, dir_path: str, dir_name: str = "git_clone") -> str:
    """
    Clone a GitHub repository into the specified local directory.

    Args:
        repo_url (str): The URL of the GitHub repository to clone.
        dir_path (str): The base directory where the repo should be cloned.
        dir_name (str, optional): The folder name for the cloned repo.
                                  Can be user-defined or auto-generated by an LLM.

    Returns:
        str: A message indicating success or the reason for failure.
    """
    if not os.path.isdir(dir_path):
        return f"Invalid path: {dir_path} does not exist or is not a directory."

    try:
        full_path = os.path.join(dir_path, dir_name)
        Repo.clone_from(repo_url, full_path)
        return f"Repository cloned successfully to {full_path}"
    except Exception as e:
        return f"Git clone failed: {e}"
