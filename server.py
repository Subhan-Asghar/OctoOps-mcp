import os
from github import Github, Auth
from git import Repo
from dotenv import load_dotenv
from github.GithubException import UnknownObjectException, GithubException
from mcp.server.fastmcp import FastMCP

# Initialize MCP Agent
mcp = FastMCP("OctoOps")

# Load environment variables
load_dotenv()

def git_auth() -> Github:
    access_token = os.getenv("GITHUB_TOKEN")
    if not access_token:
        raise EnvironmentError("Missing GITHUB_TOKEN in environment variables.")

    auth = Auth.Token(access_token)
    return Github(auth=auth)

@mcp.tool()
def git_clone(repo_url: str, dir_path: str, dir_name: str = "git_clone") -> str:
    """
    Clone a GitHub repository into the specified local directory.

    Args:
        repo_url (str): The URL of the GitHub repository to clone.
        dir_path (str): The base directory where the repo should be cloned.
        dir_name (str, optional): The folder name for the cloned repo.
                                  Can be user-defined or auto-generated by an LLM.

    Returns:
        str: A message indicating success or the reason for failure.
    """
    if not os.path.isdir(dir_path):
        return f"Invalid path: {dir_path} does not exist or is not a directory."

    try:
        full_path = os.path.join(dir_path, dir_name)
        Repo.clone_from(repo_url, full_path)
        return f"Repository cloned successfully to {full_path}"
    except Exception as e:
        return f"Git clone failed: {e}"

@mcp.tool()
def repo_list() -> list[str]:
    """
    Retrieve a list of repository names for the authenticated GitHub user.

    This function uses the GitHub personal access token from the environment
    variable `GITHUB_TOKEN` to authenticate via the GitHub API. It then fetches
    all repositories (public and private) associated with the authenticated user
    and returns a list of their names.

    Returns:
        list[str]: A list containing the names of all repositories belonging
                   to the authenticated user.
    """
    github_client = git_auth()
    
    return [repo.name for repo in github_client.get_user().get_repos()]

@mcp.tool()
def delete_repo(repo_name: str) -> str:
    """
    Delete a GitHub repository.

    Args:
        repo_name (str): The name of the repository to delete.

    Returns:
        str: A message indicating whether the deletion was successful or failed.
    """
    try:
        github_client = git_auth()
        user=github_client.get_user()
        username=f"{user.login}"
        repo = github_client.get_repo(f"{username}/{repo_name}")
        repo.delete()
        return f"Repository '{repo_name}' deleted successfully."
    except Exception as e:
        return f"Failed to delete repository '{repo_name}': {e}"
    
@mcp.tool()
def delete_repo_file(repo_name: str, file_path: str, branch: str = "main") -> str:
    """
    Delete a specific file from a GitHub repository branch.

    Args:
        repo_name (str): The name of the GitHub repository.
        file_path (str): The path to the file that should be deleted.
        branch (str, optional): The branch name where the file exists. Defaults to "main".

    Returns:
        str: A success message or the reason for failure.
    """

    try:
        github_client = git_auth()
        user=github_client.get_user()
        username=f"{user.login}"
        repo = github_client.get_repo(f"{username}/{repo_name}")
        contents = repo.get_contents(file_path, ref=branch)
        repo.delete_file(contents.path, f"Deleted {file_path} from {branch}", contents.sha, branch=branch)
        return f"File '{file_path}' deleted successfully from '{repo_name}' on branch '{branch}'."
    except Exception as e:
        return f"Failed to delete file: {e}"
    
@mcp.tool()
def create_repo(repo_name: str) -> str:
    """
    Create a new GitHub repository using an authenticated Git client.

    Args:
        repo_name (str): The name of the repository to create.

    Returns:
        str: A success message with the repository name and URL, or a warning if the repository already exists.

    Raises:
        Exception: If authentication fails or repository creation encounters an unexpected error.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name in existing_repo_names:
            return f"Repository with name '{repo_name}' already exists."

        repo = user.create_repo(repo_name)
        return f"Repository '{repo.name}' created successfully at {repo.html_url}"

    except Exception as e:
        return f"Failed to create repository: {str(e)}"
    
@mcp.tool()
def branch_list(repo_name: str) -> str:
    """
    Retrieve and return the list of branches for a given GitHub repository.

    Args:
        repo_name (str): The name of the repository.

    Returns:
        str: A message containing the list of branch names, or an error message if the repository is not found or access fails.

    Raises:
        Exception: If authentication or repository retrieval fails.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name not in existing_repo_names:
            return f"Repository with name '{repo_name}' does not exist."

        repo = git_client.get_repo(f"{user.login}/{repo_name}")
        branches = repo.get_branches()
        branch_names = [branch.name for branch in branches]

        return f"Branches in '{repo_name}': {', '.join(branch_names)}"

    except Exception as e:
        return f"Failed to retrieve branch list: {str(e)}"

@mcp.tool()
def create_branch(repo_name: str, branch_name: str) -> str:
    """
    Create a new branch in the specified GitHub repository.

    Args:
        repo_name (str): The name of the repository.
        branch_name (str): The name of the branch to create.

    Returns:
        str: A message indicating whether the branch was created or already exists.

    Raises:
        Exception: If authentication or branch creation fails.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name not in existing_repo_names:
            return f"Repository '{repo_name}' does not exist."

        repo = git_client.get_repo(f"{user.login}/{repo_name}")
        existing_branches = [branch.name for branch in repo.get_branches()]
        if branch_name in existing_branches:
            return f"Branch '{branch_name}' already exists."

        source_branch = repo.get_branch("main")
        repo.create_git_ref(ref=f"refs/heads/{branch_name}", sha=source_branch.commit.sha)

        return f"Branch '{branch_name}' created successfully."

    except Exception as e:
        return f"Failed to create branch: {str(e)}"
    
@mcp.tool()
def delete_branch(repo_name: str, branch_name: str) -> str:
    """
    Delete a branch from the specified GitHub repository.

    Args:
        repo_name (str): The name of the repository.
        branch_name (str): The name of the branch to delete.

    Returns:
        str: A message indicating whether the branch was deleted successfully or not.

    Raises:
        Exception: If authentication or branch deletion fails.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name not in existing_repo_names:
            return f"Repository '{repo_name}' does not exist."

        repo = git_client.get_repo(f"{user.login}/{repo_name}")

        branch_names = [branch.name for branch in repo.get_branches()]
        if branch_name not in branch_names:
            return f"Branch '{branch_name}' does not exist."


        repo.get_git_ref(f"heads/{branch_name}").delete()
        return f"Branch '{branch_name}' deleted successfully."

    except Exception as e:
        return f"Failed to delete branch '{branch_name}': {str(e)}"
    
@mcp.tool()
def archive_repo(repo_name: str,archive:bool=True) -> str:
    """
    Archives or unarchives a GitHub repository under the authenticated user's account.

    Parameters:
        repo_name (str): The name of the repository to be modified.
        archive (bool): If True, the repository will be archived; if False, it will be unarchived.

    Returns:
        str: A message indicating the outcome of the archive or unarchive operation.
    
    Raises:
        GithubException: If an error occurs during interaction with the GitHub API.
    """
    try:
        
        git_client = git_auth()  
        
        user= git_client.get_user()
        
        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name not in existing_repo_names:
            return f"Repository '{repo_name}' does not exist in your account."


        repo= git_client.get_repo(f"{user.login}/{repo_name}")
        repo.edit(archived=archive)
        return f"Repository '{repo_name}' has been archived successfully."
    
    except Exception as e:
        return f" Unexpected error: {str(e)}"
    
@mcp.tool()
def transfer_repo(repo_name: str, new_owner: str) -> str:
    """
    Transfers ownership of a GitHub repository to a new owner.

    Parameters:
        repo_name (str): The full name of the repository to transfer (e.g., 'username/repo_name').
        new_owner (str): The username of the new owner to whom the repository will be transferred.

    Returns:
        str: A message indicating the result of the transfer operation.
    
    Raises:
        GithubException: If the transfer operation fails due to an API issue.
    """
    try:
        git_client = git_auth()  
        user= git_client.get_user()
        repo = git_client.get_repo(f"{user.login}/{repo_name}")
        repo.transfer_ownership(new_owner)
        
        return f"Transfer initiated. Repository '{repo_name}' is being transferred to '{new_owner}'."
    
    except UnknownObjectException:
        return f"Repository '{repo_name}' does not exist."
    except GithubException as e:
        return f"Failed to initiate transfer for '{repo_name}': {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"
    
@mcp.tool()
def add_topic(topics: list[str], repo_name: str) -> str:
    """
    Adds one or more topics to a specified GitHub repository.

    Parameters:
        topics (list[str]): A list of topic names to be added to the repository.
        repo_name (str): The name of the repository (without username prefix).

    Returns:
        str: A message indicating the result of the topic addition operation.

    Raises:
        GithubException: If the GitHub API call fails.
        UnknownObjectException: If the specified repository does not exist.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        repo = git_client.get_repo(f"{user.login}/{repo_name}")
        existing_topics = repo.get_topics()
        updated_topics = list(set(existing_topics + topics))  
        repo.replace_topics(updated_topics)

        return f"Topics {topics} have been added to repository '{repo_name}'."

    except UnknownObjectException:
        return f"Repository '{repo_name}' does not exist."
    except GithubException as e:
        return f"Failed to add topics to '{repo_name}': {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"
    
@mcp.tool()
def create_repo_file(
    path: str,
    file_name: str,
    repo_name: str,
    branch: str = "main",
    commit_text: str = "Create file",
    file_content: str = ""
) -> str:
    """
    Creates a new file in a GitHub repository under the authenticated user's account.

    Parameters:
    - path (str): Relative directory path inside the repository where the file should be created.
    - file_name (str): Name of the file to create (e.g., 'readme.md').
    - repo_name (str): Name of the GitHub repository (must exist).
    - branch (str): Branch name where the file should be created. Defaults to 'main'.
    - commit_text (str): Commit message for the file creation. Defaults to 'Create file'.
    - file_content (str): Content of the file. Defaults to an empty string.

    Returns:
    - str: Status message indicating success or describing the failure reason.
    """
    try:
        github_client = git_auth()
        user = github_client.get_user()
        repo = github_client.get_repo(f"{user.login}/{repo_name}")

        
        normalized_path = path.strip("/").rstrip("/")
        full_path = f"{normalized_path}/{file_name}" if normalized_path else file_name
        repo.create_file(full_path, commit_text, file_content, branch)
        return f"File '{full_path}' successfully created in repository '{repo_name}' on branch '{branch}'."

    except UnknownObjectException:
        return f"Repository '{repo_name}' does not exist or could not be found."

    except GithubException as e:
        return f"GitHub API error while creating file in '{repo_name}': {str(e)}"

    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"
