import os
from github import Github, Auth
from git import Repo
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP

# Initialize MCP Agent
mcp = FastMCP("OctoOps")

# Load environment variables
load_dotenv()

def git_auth() -> Github:
    access_token = os.getenv("GITHUB_TOKEN")
    if not access_token:
        raise EnvironmentError("Missing GITHUB_TOKEN in environment variables.")

    auth = Auth.Token(access_token)
    return Github(auth=auth)

@mcp.tool()
def git_clone(repo_url: str, dir_path: str, dir_name: str = "git_clone") -> str:
    """
    Clone a GitHub repository into the specified local directory.

    Args:
        repo_url (str): The URL of the GitHub repository to clone.
        dir_path (str): The base directory where the repo should be cloned.
        dir_name (str, optional): The folder name for the cloned repo.
                                  Can be user-defined or auto-generated by an LLM.

    Returns:
        str: A message indicating success or the reason for failure.
    """
    if not os.path.isdir(dir_path):
        return f"Invalid path: {dir_path} does not exist or is not a directory."

    try:
        full_path = os.path.join(dir_path, dir_name)
        Repo.clone_from(repo_url, full_path)
        return f"Repository cloned successfully to {full_path}"
    except Exception as e:
        return f"Git clone failed: {e}"

@mcp.tool()
def repo_list() -> list[str]:
    """
    Retrieve a list of repository names for the authenticated GitHub user.

    This function uses the GitHub personal access token from the environment
    variable `GITHUB_TOKEN` to authenticate via the GitHub API. It then fetches
    all repositories (public and private) associated with the authenticated user
    and returns a list of their names.

    Returns:
        list[str]: A list containing the names of all repositories belonging
                   to the authenticated user.
    """
    github_client = git_auth()
    
    return [repo.name for repo in github_client.get_user().get_repos()]

@mcp.tool()
def delete_repo(repo_name: str) -> str:
    """
    Delete a GitHub repository.

    Args:
        repo_name (str): The name of the repository to delete.

    Returns:
        str: A message indicating whether the deletion was successful or failed.
    """
    username = os.getenv("GITHUB_USERNAME")
    if not username:
        return "Environment variable GITHUB_USERNAME is not set."

    try:
        github_client = git_auth()
        repo = github_client.get_repo(f"{username}/{repo_name}")
        repo.delete()
        return f"Repository '{repo_name}' deleted successfully."
    except Exception as e:
        return f"Failed to delete repository '{repo_name}': {e}"
    
@mcp.tool()
def delete_repo_file(repo_name: str, file_path: str, branch: str = "main") -> str:
    """
    Delete a specific file from a GitHub repository branch.

    Args:
        repo_name (str): The name of the GitHub repository.
        file_path (str): The path to the file that should be deleted.
        branch (str, optional): The branch name where the file exists. Defaults to "main".

    Returns:
        str: A success message or the reason for failure.
    """
    username = os.getenv("GITHUB_USERNAME")
    if not username:
        return "Environment variable GITHUB_USERNAME is not set."

    try:
        github_client = git_auth()
        repo = github_client.get_repo(f"{username}/{repo_name}")
        contents = repo.get_contents(file_path, ref=branch)
        repo.delete_file(contents.path, f"Deleted {file_path} from {branch}", contents.sha, branch=branch)
        return f"File '{file_path}' deleted successfully from '{repo_name}' on branch '{branch}'."
    except Exception as e:
        return f"Failed to delete file: {e}"
    
@mcp.tool()
def create_repo(repo_name: str) -> str:
    """
    Create a new GitHub repository using an authenticated Git client.

    Args:
        repo_name (str): The name of the repository to create.

    Returns:
        str: A success message with the repository name and URL, or a warning if the repository already exists.

    Raises:
        Exception: If authentication fails or repository creation encounters an unexpected error.
    """
    try:
        git_client = git_auth()
        user = git_client.get_user()

        existing_repo_names = {repo.name for repo in user.get_repos()}
        if repo_name in existing_repo_names:
            return f"Repository with name '{repo_name}' already exists."

        repo = user.create_repo(repo_name)
        return f"Repository '{repo.name}' created successfully at {repo.html_url}"

    except Exception as e:
        return f"Failed to create repository: {str(e)}"